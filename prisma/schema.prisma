// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Question {
  id            String    @id @default(cuid())
  content       String
  options       Option[]
  gameId        String
  game          Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("questions")
}

model Option {
  id          String     @id @default(cuid())
  content     String
  isCorrect   Boolean
  questionId  String
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("options")
}

model Game {
  id            String        @id @default(cuid())
  userId        String
  title         String
  description   String?
  introVideo    String?
  gamePlayers   GamePlayer[]
  questions     Question[]

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("games")
}

model GamePlayer {
  id          String    @id @default(cuid())
  gameId      String
  playername  String
  playerNpm   String
  totalPoint  Int       @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_players")
}